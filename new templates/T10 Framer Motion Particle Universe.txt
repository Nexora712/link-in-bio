import React, { useEffect, useState } from 'react';
import { motion, useAnimation, AnimatePresence } from 'framer-motion';
import { Canvas } from '@react-three/fiber';
import { Stars, Float, Text3D } from '@react-three/drei';

const ParticleUniverseTemplate = ({ userData }) => {
  const [hoveredLink, setHoveredLink] = useState(null);
  const controls = useAnimation();

  const linkVariants = {
    hidden: { 
      opacity: 0, 
      scale: 0,
      rotateX: -90,
      z: -100
    },
    visible: (i) => ({
      opacity: 1,
      scale: 1,
      rotateX: 0,
      z: 0,
      transition: {
        delay: i * 0.2,
        duration: 0.8,
        type: "spring",
        stiffness: 100
      }
    }),
    hover: {
      scale: 1.05,
      rotateY: 10,
      z: 50,
      boxShadow: "0 25px 50px rgba(139, 92, 246, 0.3)",
      transition: {
        type: "spring",
        stiffness: 300,
        damping: 20
      }
    }
  };

  const particleVariants = {
    animate: {
      y: [0, -20, 0],
      rotate: [0, 360],
      scale: [1, 1.2, 1],
      transition: {
        duration: 3,
        repeat: Infinity,
        ease: "easeInOut"
      }
    }
  };

  const avatarVariants = {
    initial: { 
      scale: 0, 
      rotate: -180, 
      opacity: 0,
      filter: "blur(20px)"
    },
    animate: { 
      scale: 1, 
      rotate: 0, 
      opacity: 1,
      filter: "blur(0px)",
      transition: {
        duration: 1.5,
        type: "spring",
        stiffness: 80
      }
    },
    hover: {
      scale: 1.1,
      rotate: [0, 5, -5, 0],
      transition: {
        rotate: {
          duration: 0.5,
          repeat: 2,
          ease: "easeInOut"
        }
      }
    }
  };

  return (
    <div className="particle-universe-container">
      {/* 3D Background */}
      <div className="three-background">
        <Canvas camera={{ position: [0, 0, 5] }}>
          <Stars radius={300} depth={60} count={1000} factor={7} fade />
          <Float
            speed={1.5}
            rotationIntensity={1}
            floatIntensity={2}
          >
            <Text3D
              font="/fonts/helvetiker_regular.typeface.json"
              size={0.5}
              height={0.1}
              curveSegments={32}
              position={[0, 2, 0]}
            >
              {userData.name}
              <meshNormalMaterial />
            </Text3D>
          </Float>
        </Canvas>
      </div>

      {/* Floating Particles */}
      <div className="floating-particles">
        {Array.from({ length: 20 }).map((_, i) => (
          <motion.div
            key={i}
            className="particle"
            variants={particleVariants}
            animate="animate"
            style={{
              position: 'absolute',
              left: `${Math.random() * 100}%`,
              top: `${Math.random() * 100}%`,
              width: Math.random() * 10 + 5,
              height: Math.random() * 10 + 5,
              background: `hsl(${250 + Math.random() * 60}, 70%, 60%)`,
              borderRadius: '50%',
              zIndex: 1
            }}
          />
        ))}
      </div>

      {/* Main Content */}
      <div className="content-wrapper">
        {/* Animated Avatar */}
        <motion.div
          className="avatar-container"
          variants={avatarVariants}
          initial="initial"
          animate="animate"
          whileHover="hover"
        >
          <motion.div className="avatar-glow">
            <img src={userData.avatar} alt={userData.name} />
            <motion.div 
              className="energy-ring"
              animate={{ 
                rotate: 360,
                scale: [1, 1.2, 1]
              }}
              transition={{ 
                rotate: { duration: 20, repeat: Infinity, ease: "linear" },
                scale: { duration: 2, repeat: Infinity }
              }}
            />
          </motion.div>
        </motion.div>

        {/* Animated Title */}
        <motion.h1
          className="cosmic-title"
          initial={{ opacity: 0, y: 50, scale: 0.5 }}
          animate={{ opacity: 1, y: 0, scale: 1 }}
          transition={{ delay: 0.8, duration: 1, type: "spring" }}
        >
          {userData.name.split('').map((letter, i) => (
            <motion.span
              key={i}
              animate={{
                y: [0, -10, 0],
                color: [
                  "hsl(250, 70%, 70%)",
                  "hsl(280, 70%, 80%)",
                  "hsl(310, 70%, 70%)"
                ]
              }}
              transition={{
                y: { delay: i * 0.1, duration: 2, repeat: Infinity },
                color: { delay: i * 0.1, duration: 3, repeat: Infinity }
              }}
            >
              {letter}
            </motion.span>
          ))}
        </motion.h1>

        {/* Bio with Typewriter Effect */}
        <motion.div
          className="bio-container"
          initial={{ opacity: 0 }}
          animate={{ opacity: 1 }}
          transition={{ delay: 1.5 }}
        >
          <TypewriterText text={userData.bio} />
        </motion.div>

        {/* Advanced Link Cards */}
        <motion.div className="links-grid">
          <AnimatePresence>
            {userData.links.map((link, i) => (
              <motion.div
                key={link.id}
                className="link-card"
                custom={i}
                variants={linkVariants}
                initial="hidden"
                animate="visible"
                whileHover="hover"
                onHoverStart={() => setHoveredLink(i)}
                onHoverEnd={() => setHoveredLink(null)}
                onClick={() => window.open(link.url, '_blank')}
              >
                <motion.div 
                  className="link-icon"
                  animate={{ 
                    rotate: hoveredLink === i ? 360 : 0,
                    scale: hoveredLink === i ? 1.2 : 1
                  }}
                  transition={{ duration: 0.5 }}
                >
                  {link.icon}
                </motion.div>
                
                <motion.div className="link-content">
                  <h3>{link.title}</h3>
                  <p>{link.description}</p>
                </motion.div>

                {/* Animated Border */}
                <motion.div
                  className="animated-border"
                  animate={{
                    background: [
                      "linear-gradient(45deg, #8b5cf6, #ec4899)",
                      "linear-gradient(45deg, #ec4899, #06b6d4)",
                      "linear-gradient(45deg, #06b6d4, #8b5cf6)"
                    ]
                  }}
                  transition={{ duration: 3, repeat: Infinity }}
                />

                {/* Holographic Effect */}
                <motion.div
                  className="holographic-overlay"
                  animate={{
                    opacity: hoveredLink === i ? 0.3 : 0,
                    background: [
                      "linear-gradient(45deg, transparent, rgba(139, 92, 246, 0.3), transparent)",
                      "linear-gradient(90deg, transparent, rgba(236, 72, 153, 0.3), transparent)",
                      "linear-gradient(135deg, transparent, rgba(6, 182, 212, 0.3), transparent)"
                    ]
                  }}
                  transition={{ duration: 2, repeat: Infinity }}
                />
              </motion.div>
            ))}
          </AnimatePresence>
        </motion.div>

        {/* Social Links with Orbital Animation */}
        <motion.div 
          className="social-constellation"
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          transition={{ delay: 2, type: "spring" }}
        >
          {userData.socialLinks.map((social, i) => (
            <motion.a
              key={social.platform}
              href={social.url}
              className="social-planet"
              animate={{
                rotate: 360,
                x: Math.cos((360 / userData.socialLinks.length) * i * (Math.PI / 180)) * 100,
                y: Math.sin((360 / userData.socialLinks.length) * i * (Math.PI / 180)) * 100
              }}
              transition={{
                rotate: { duration: 20, repeat: Infinity, ease: "linear" },
                x: { duration: 0 },
                y: { duration: 0 }
              }}
              whileHover={{ scale: 1.5, rotate: 0 }}
            >
              {social.icon}
              <motion.div
                className="orbit-trail"
                animate={{ opacity: [0, 1, 0] }}
                transition={{ duration: 2, repeat: Infinity }}
              />
            </motion.a>
          ))}
        </motion.div>
      </div>
    </div>
  );
};

// Typewriter Component
const TypewriterText = ({ text }) => {
  const [displayText, setDisplayText] = useState('');
  
  useEffect(() => {
    let i = 0;
    const timer = setInterval(() => {
      if (i < text.length) {
        setDisplayText(text.slice(0, i + 1));
        i++;
      } else {
        clearInterval(timer);
      }
    }, 100);
    
    return () => clearInterval(timer);
  }, [text]);

  return (
    <motion.p
      className="typewriter-text"
      animate={{ opacity: [1, 0.7, 1] }}
      transition={{ duration: 1, repeat: Infinity }}
    >
      {displayText}
      <motion.span
        className="cursor"
        animate={{ opacity: [1, 0] }}
        transition={{ duration: 0.5, repeat: Infinity }}
      >
        |
      </motion.span>
    </motion.p>
  );
};

export default ParticleUniverseTemplate;
