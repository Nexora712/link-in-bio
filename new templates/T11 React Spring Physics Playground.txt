import React, { useState, useRef } from 'react';
import { useSpring, animated, useChain, useSpringRef, useSprings } from '@react-spring/web';
import { useDrag } from '@use-gesture/react';
import { Canvas, useFrame } from '@react-three/fiber';
import { Physics, RigidBody } from '@react-three/rapier';

const PhysicsPlaygroundTemplate = ({ userData }) => {
  const [open, setOpen] = useState(false);
  const [draggedItem, setDraggedItem] = useState(null);

  // Physics-based avatar animation
  const avatarRef = useSpringRef();
  const avatarSpring = useSpring({
    ref: avatarRef,
    from: { 
      scale: 0, 
      rotate: -180, 
      y: -100,
      filter: 'blur(10px)'
    },
    to: { 
      scale: 1, 
      rotate: 0, 
      y: 0,
      filter: 'blur(0px)'
    },
    config: {
      tension: 120,
      friction: 14,
      mass: 1
    }
  });

  // Chain animation for links
  const linksRef = useSpringRef();
  const linksSprings = useSprings(
    userData.links.length,
    userData.links.map((_, i) => ({
      ref: linksRef,
      from: { 
        opacity: 0, 
        transform: 'translate3d(-100px, 0, 0) rotateY(-90deg)',
        filter: 'blur(10px)'
      },
      to: { 
        opacity: 1, 
        transform: 'translate3d(0px, 0, 0) rotateY(0deg)',
        filter: 'blur(0px)'
      },
      delay: i * 200,
      config: {
        tension: 280,
        friction: 60,
        mass: 0.8
      }
    }))
  );

  // Bio animation
  const bioRef = useSpringRef();
  const bioSpring = useSpring({
    ref: bioRef,
    from: { opacity: 0, y: 50, scale: 0.8 },
    to: { opacity: 1, y: 0, scale: 1 },
    config: {
      tension: 200,
      friction: 25
    }
  });

  // Chain all animations
  useChain([avatarRef, bioRef, linksRef], [0, 0.5, 1]);

  // Drag gesture for links
  const bind = useDrag(({ args: [index], active, movement: [mx, my] }) => {
    setDraggedItem(active ? index : null);
    
    // Update spring for dragged item
    linksSprings[index].start({
      transform: active 
        ? `translate3d(${mx}px, ${my}px, 0) scale(1.1) rotateZ(${mx / 10}deg)`
        : 'translate3d(0px, 0px, 0) scale(1) rotateZ(0deg)',
      config: { tension: 800, friction: 35 }
    });
  });

  // Floating social icons spring
  const socialSprings = useSprings(
    userData.socialLinks.length,
    userData.socialLinks.map((_, i) => ({
      from: { y: 0 },
      to: async (next) => {
        while (true) {
          await next({ y: -20 });
          await next({ y: 0 });
        }
      },
      delay: i * 300,
      config: {
        duration: 2000,
        tension: 120,
        friction: 14
      }
    }))
  );

  return (
    <div className="physics-playground-container">
      {/* 3D Physics Background */}
      <div className="three-physics-bg">
        <Canvas>
          <Physics>
            <FloatingObjects />
            <ambientLight intensity={0.5} />
            <pointLight position={[10, 10, 10]} />
          </Physics>
        </Canvas>
      </div>

      <div className="playground-content">
        {/* Animated Avatar with Physics */}
        <animated.div
          className="physics-avatar"
          style={avatarSpring}
        >
          <div className="avatar-physics-container">
            <animated.img 
              src={userData.avatar} 
              alt={userData.name}
              style={{
                transform: avatarSpring.rotate.to(r => `rotateY(${r}deg)`),
                filter: avatarSpring.filter
              }}
            />
            
            {/* Gravitational field effect */}
            <div className="gravity-field">
              {Array.from({ length: 12 }).map((_, i) => (
                <animated.div
                  key={i}
                  className="gravity-particle"
                  style={{
                    transform: avatarSpring.scale.to(s => 
                      `rotate(${i * 30}deg) translateX(${80 * s}px) scale(${s})`
                    ),
                    animationDelay: `${i * 0.1}s`
                  }}
                />
              ))}
            </div>
          </div>
        </animated.div>

        {/* Name with Elastic Animation */}
        <animated.h1 
          className="elastic-title"
          style={bioSpring}
        >
          {userData.name.split('').map((letter, i) => (
            <ElasticLetter key={i} letter={letter} delay={i * 0.1} />
          ))}
        </animated.h1>

        {/* Bio with Wave Animation */}
        <animated.p 
          className="wave-bio"
          style={{
            opacity: bioSpring.opacity,
            transform: bioSpring.y.to(y => `translateY(${y}px)`)
          }}
        >
          {userData.bio.split('').map((char, i) => (
            <animated.span
              key={i}
              className="wave-char"
              style={{
                animationDelay: `${i * 0.05}s`
              }}
            >
              {char}
            </animated.span>
          ))}
        </animated.p>

        {/* Draggable Physics Links */}
        <div className="draggable-links">
          {linksSprings.map((style, i) => (
            <animated.div
              key={userData.links[i].id}
              className="physics-link"
              style={{
                ...style,
                zIndex: draggedItem === i ? 1000 : 1,
                cursor: 'grab'
              }}
              {...bind(i)}
              onClick={() => window.open(userData.links[i].url, '_blank')}
            >
              <div className="link-physics-body">
                <animated.div 
                  className="link-icon"
                  style={{
                    transform: style.transform.to(t => 
                      `${t} rotateY(${draggedItem === i ? 180 : 0}deg)`
                    )
                  }}
                >
                  {userData.links[i].icon}
                </animated.div>
                
                <div className="link-content">
                  <h3>{userData.links[i].title}</h3>
                  <p>{userData.links[i].description}</p>
                </div>

                {/* Physics particle trail */}
                <div className="particle-trail">
                  {Array.from({ length: 5 }).map((_, j) => (
                    <animated.div
                      key={j}
                      className="trail-particle"
                      style={{
                        opacity: draggedItem === i ? 1 : 0,
                        animationDelay: `${j * 0.1}s`
                      }}
                    />
                  ))}
                </div>
              </div>
            </animated.div>
          ))}
        </div>

        {/* Floating Social Media Icons */}
        <div className="floating-social">
          {socialSprings.map((style, i) => (
            <animated.a
              key={userData.socialLinks[i].platform}
              href={userData.socialLinks[i].url}
              className="floating-social-icon"
              style={{
                transform: style.y.to(y => `translateY(${y}px)`),
                left: `${20 + i * 15}%`
              }}
            >
              <div className="social-physics-body">
                {userData.socialLinks[i].icon}
                <div className="social-ripple" />
              </div>
            </animated.a>
          ))}
        </div>
      </div>
    </div>
  );
};

// Elastic Letter Component
const ElasticLetter = ({ letter, delay }) => {
  const [hovered, setHovered] = useState(false);
  
  const letterSpring = useSpring({
    transform: hovered 
      ? 'scale(1.5) rotateY(180deg)' 
      : 'scale(1) rotateY(0deg)',
    color: hovered ? '#ec4899' : '#8b5cf6',
    config: {
      tension: 300,
      friction: 10
    }
  });

  return (
    <animated.span
      className="elastic-letter"
      style={letterSpring}
      onMouseEnter={() => setHovered(true)}
      onMouseLeave={() => setHovered(false)}
    >
      {letter}
    </animated.span>
  );
};

// 3D Floating Objects Component
const FloatingObjects = () => {
  const sphereRef = useRef();
  const boxRef = useRef();

  useFrame((state) => {
    if (sphereRef.current) {
      sphereRef.current.rotation.x = Math.sin(state.clock.elapsedTime) * 0.3;
      sphereRef.current.rotation.y = Math.cos(state.clock.elapsedTime) * 0.3;
    }
    if (boxRef.current) {
      boxRef.current.rotation.z = state.clock.elapsedTime * 0.5;
    }
  });

  return (
    <>
      <RigidBody type="dynamic">
        <mesh ref={sphereRef} position={[-3, 2, 0]}>
          <sphereGeometry args={[0.5, 32, 32]} />
          <meshStandardMaterial color="#8b5cf6" wireframe />
        </mesh>
      </RigidBody>
      
      <RigidBody type="dynamic">
        <mesh ref={boxRef} position={[3, -2, 0]}>
          <boxGeometry args={[1, 1, 1]} />
          <meshStandardMaterial color="#ec4899" wireframe />
        </mesh>
      </RigidBody>
    </>
  );
};

export default PhysicsPlaygroundTemplate;
